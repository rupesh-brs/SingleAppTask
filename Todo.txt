//schema:- 

// src/todoSchema.ts
import { z } from 'zod';

export const todoSchema = z.object({
  userId: z.number().positive(),
  title: z.string().min(1),
  completed: z.boolean().optional(),
});

export type TodoInput = z.infer<typeof todoSchema>;

//variable declarations:- 
const userId:number;
const id:number;
const title:string;
const completed:boolean;
//import statement for importing zod library..
import {z} from ....

//Error Handling:-
const userId = z.number({
	required_error: "userId is required",
	invalid_type_error: "userId must be a number",
});

const id = z.number({
	required_error: "id is required",
	invalid_type_error: "id must be a number",
});

const title = z.string({
	required_error: "title is required",
	invalid_type_error: "title must be a string",
	
});

const completed = z.boolean({
	required_error: "completed is required to check weather the task is completed or not!",
	invalid_type_error: "completed must be boolean type!",
	
});


//check validations:- 
z.number().int();
z.string().toLowerCase();
z.string().min(5, { message: "Must be 5 or more characters long" });



---end of the zod validations----

//Store for crud operations of todo list:- 
// src/store.ts
import create from 'zustand';
import axios from 'axios';

interface Todo {
  userId: number;
  id: number;
  title: string;
  completed: boolean;
}

interface TodoStore {
  todos: Todo[];
  fetchTodos: () => Promise<void>;
  addTodo: (newTodo: Omit<Todo, 'id'>) => Promise<void>;
  updateTodo: (id: number, updatedData: Partial<Todo>) => Promise<void>;
  deleteTodo: (id: number) => Promise<void>;
}

const useTodoStore = create<TodoStore>((set) => ({
  todos: [],
  fetchTodos: async () => {
    const response = await axios.get<Todo[]>('https://jsonplaceholder.typicode.com/todos');
    set({ todos: response.data });
  },
  addTodo: async (newTodo) => {
    const response = await axios.post<Todo>('https://jsonplaceholder.typicode.com/todos', newTodo);
    set((state) => ({ todos: [...state.todos, response.data] }));
  },
  updateTodo: async (id, updatedData) => {
    const response = await axios.put<Todo>(`https://jsonplaceholder.typicode.com/todos/${id}`, updatedData);
    set((state) => ({
      todos: state.todos.map(todo => (todo.id === id ? response.data : todo)),
    }));
  },
  deleteTodo: async (id) => {
    await axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`);
    set((state) => ({
      todos: state.todos.filter(todo => todo.id !== id),
    }));
  },
}));

export default useTodoStore;

//component:- 
// src/store.ts
import create from 'zustand';
import axios from 'axios';

interface Todo {
  userId: number;
  id: number;
  title: string;
  completed: boolean;
}

interface TodoStore {
  todos: Todo[];
  fetchTodos: () => Promise<void>;
  addTodo: (newTodo: Omit<Todo, 'id'>) => Promise<void>;
  updateTodo: (id: number, updatedData: Partial<Todo>) => Promise<void>;
  deleteTodo: (id: number) => Promise<void>;
}

const useTodoStore = create<TodoStore>((set) => ({
  todos: [],
  fetchTodos: async () => {
    const response = await axios.get<Todo[]>('https://jsonplaceholder.typicode.com/todos');
    set({ todos: response.data });
  },
  addTodo: async (newTodo) => {
    const response = await axios.post<Todo>('https://jsonplaceholder.typicode.com/todos', newTodo);
    set((state) => ({ todos: [...state.todos, response.data] }));
  },
  updateTodo: async (id, updatedData) => {
    const response = await axios.put<Todo>(`https://jsonplaceholder.typicode.com/todos/${id}`, updatedData);
    set((state) => ({
      todos: state.todos.map(todo => (todo.id === id ? response.data : todo)),
    }));
  },
  deleteTodo: async (id) => {
    await axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`);
    set((state) => ({
      todos: state.todos.filter(todo => todo.id !== id),
    }));
  },
}));

export default useTodoStore;



